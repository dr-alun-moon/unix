#!/bin/bash

# function definitions.
# Functions help decompose problems into managable chunks.
# I sometime use functions as a way of labeling simple operations.


function usage ()
{
cat<<endofhelp
Usage: dtidy [-h][-v][-d dir][-t dest] [.extensions]
    -h          Show this help
    -v          be verbose
    -d dir      directory to tidy files from
    -t dest     destination directory
    .extensions list of extensions (with dot) to tidy
Copies files from 'dir' with extensions given, to 'dest' directory.
endofhelp
}

function error { 
	echo $1
   	exit 1
}

# Main Script execution follows.
# set some commandline options
while getopts hvd:t: option
do
    case $option in
        h)
			# call the function to show the help and exit
            usage && exit 0
            ;;
        v)
			# set the verbose flag for use in commands below
            verbose=-v
            ;;
        d)
			# set the directory to move from
            dir=$OPTARG
            ;;
        t)
			# set the directory to move to
            dest=$OPTARG
            ;;
    esac
done
# shift here removes the options from the positional parameters
# leaving the rest of the command line (.extensions in our case)
# in $1, $2, etc
shift $((OPTIND-1))

# check we have a directory to move files into
# if not create directory
# The parameter expansion 
#   ${parameter:?word} Display Error if Null or Unset.
# if the parameter is not set, write the message to std error and exit
# the line can be read as,
#  " a directory exists  OR make a directory
test -d ${dest:?"Destination directory not set"} || mkdir $verbose ${dest}

# we can now loop over the extensions in the positional parameters
for ext in $*
do
	# The parameter expansion
	# ${parameter:-word}
    #    Use Default Values.
    #    If parameter is unset or null, the expansion of word is substituted.
    #    Otherwise, the value of parameter is substituted.
	mv $verbose ${dir:-.}/*${ext} ${dest}
done

